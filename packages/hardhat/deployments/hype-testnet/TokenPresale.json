{
  "address": "0x3EA4857E2402D9671a7289233024f00728Fa8314",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "presaleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensReceived",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "presaleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "presaleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenPrice",
          "type": "uint256"
        }
      ],
      "name": "PresaleCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "presaleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "PresaleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "presaleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "presaleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        }
      ],
      "name": "WhitelistUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_presaleId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "addToTier1Whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_presaleId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "addToTier2Whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_presaleId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ethAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_tokenPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_valuation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalAllocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minDepositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxDepositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalRaiseGoal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tier1WhitelistEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tier2WhitelistEndTime",
          "type": "uint256"
        }
      ],
      "name": "createPresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_presaleId",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_presaleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_presaleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserWhitelistStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tier1Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tier2Amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "presales",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "presaleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "valuation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAllocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDepositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDepositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRaiseGoal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRaised",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tier1WhitelistEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tier2WhitelistEndTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_presaleId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setPresaleStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tier1Whitelist",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tier2Whitelist",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_presaleId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_presaleId",
          "type": "uint256"
        }
      ],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9bdcade5936dd2b658fa458bfa76d803782befbb1aecdf8d76cb8daac872eefb",
  "receipt": {
    "to": null,
    "from": "0x4cacfA4B61105852580BA184b6466FD9952654ce",
    "contractAddress": "0x3EA4857E2402D9671a7289233024f00728Fa8314",
    "transactionIndex": 0,
    "gasUsed": "1673176",
    "logsBloom": "0x00000000000000000000000000000000000000000080000000800000000000000000000000000000000000000000000000000080000000000000000000000000080000000000000000000000000000000001000000000000000000004000000000000000020000000000000000000800000000000000000000000000000000400000000000000001000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa640ffebe63af7b84fada50e712fe2d77d79993d4dba5b2d0ca1e840df842034",
    "transactionHash": "0x9bdcade5936dd2b658fa458bfa76d803782befbb1aecdf8d76cb8daac872eefb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 20190945,
        "transactionHash": "0x9bdcade5936dd2b658fa458bfa76d803782befbb1aecdf8d76cb8daac872eefb",
        "address": "0x3EA4857E2402D9671a7289233024f00728Fa8314",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004cacfa4b61105852580ba184b6466fd9952654ce"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa640ffebe63af7b84fada50e712fe2d77d79993d4dba5b2d0ca1e840df842034"
      }
    ],
    "blockNumber": 20190945,
    "cumulativeGasUsed": "1673176",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "000cc53babc47b82895d7960c0bf7869",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensReceived\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"name\":\"PresaleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"PresaleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_presaleId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"addToTier1Whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_presaleId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"addToTier2Whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_presaleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_valuation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRaiseGoal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier1WhitelistEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier2WhitelistEndTime\",\"type\":\"uint256\"}],\"name\":\"createPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_presaleId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_presaleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_presaleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserWhitelistStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tier1Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier2Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"presales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRaiseGoal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier1WhitelistEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier2WhitelistEndTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_presaleId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setPresaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tier1Whitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tier2Whitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_presaleId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_presaleId\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A contract for managing token presales with tiered whitelisting and configurable parameters\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"addToTier1Whitelist(uint256,address[],uint256[])\":{\"details\":\"Add users to tier 1 whitelist\",\"params\":{\"_amounts\":\"Array of max deposit amounts for each user\",\"_presaleId\":\"ID of the presale\",\"_users\":\"Array of user addresses\"}},\"addToTier2Whitelist(uint256,address[],uint256[])\":{\"details\":\"Add users to tier 2 whitelist\",\"params\":{\"_amounts\":\"Array of max deposit amounts for each user\",\"_presaleId\":\"ID of the presale\",\"_users\":\"Array of user addresses\"}},\"calculateTokenAmount(uint256,uint256)\":{\"details\":\"Calculate tokens to receive for a given ETH amount\",\"params\":{\"_ethAmount\":\"Amount of ETH\",\"_presaleId\":\"ID of the presale\"},\"returns\":{\"_0\":\"Amount of tokens to receive\"}},\"createPresale(address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Create a new presale\",\"params\":{\"_endTime\":\"End time of the presale\",\"_maxDepositAmount\":\"Maximum deposit amount per user\",\"_minDepositAmount\":\"Minimum deposit amount per user\",\"_startTime\":\"Start time of the presale\",\"_tier1WhitelistEndTime\":\"When tier 1 whitelist period ends\",\"_tier2WhitelistEndTime\":\"When tier 2 whitelist period ends\",\"_tokenAddress\":\"Address of the token being sold\",\"_tokenPrice\":\"Price of the token in ETH (wei)\",\"_tokenSymbol\":\"Symbol of the token being sold\",\"_totalAllocation\":\"Total token allocation for the presale\",\"_totalRaiseGoal\":\"Total ETH to raise\",\"_valuation\":\"Project valuation in USD (scaled by 1e18)\"}},\"deposit(uint256)\":{\"details\":\"Deposit ETH to participate in a presale\",\"params\":{\"_presaleId\":\"ID of the presale\"}},\"getUserDeposit(uint256,address)\":{\"details\":\"Get user deposit amount\",\"params\":{\"_presaleId\":\"ID of the presale\",\"_user\":\"Address of the user\"},\"returns\":{\"_0\":\"User's deposit amount\"}},\"getUserWhitelistStatus(uint256,address)\":{\"details\":\"Get user whitelist status and amount\",\"params\":{\"_presaleId\":\"ID of the presale\",\"_user\":\"Address of the user\"},\"returns\":{\"tier1Amount\":\"Tier 1 whitelist amount\",\"tier2Amount\":\"Tier 2 whitelist amount\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverERC20(address,address)\":{\"details\":\"Emergency function to recover any ERC20 tokens sent to the contract by mistake\",\"params\":{\"_recipient\":\"Address to receive the tokens\",\"_tokenAddress\":\"Address of the token to recover\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setPresaleStatus(uint256,bool)\":{\"details\":\"Set presale active status\",\"params\":{\"_isActive\":\"Whether the presale is active\",\"_presaleId\":\"ID of the presale\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawFunds(uint256,address)\":{\"details\":\"Withdraw raised funds (for owner)\",\"params\":{\"_presaleId\":\"ID of the presale\",\"_recipient\":\"Address to receive the funds\"}},\"withdrawTokens(uint256)\":{\"details\":\"Withdraw tokens after presale ends (for users)\",\"params\":{\"_presaleId\":\"ID of the presale\"}}},\"title\":\"TokenPresale\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenPresale.sol\":\"TokenPresale\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"contracts/TokenPresale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @title TokenPresale\\n * @dev A contract for managing token presales with tiered whitelisting and configurable parameters\\n */\\ncontract TokenPresale is Ownable, ReentrancyGuard {\\n    // Presale struct to store all presale details\\n    struct Presale {\\n        uint256 presaleId;\\n        address tokenAddress;\\n        string tokenSymbol;    // Symbol of the token being sold\\n        uint256 tokenPrice;    // Price in ETH per token (in wei)\\n        uint256 valuation;     // Project valuation in USD (scaled by 1e18)\\n        uint256 totalAllocation; // Total token allocation for the presale\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 minDepositAmount; // Minimum ETH deposit per user\\n        uint256 maxDepositAmount; // Maximum ETH deposit per user\\n        uint256 totalRaiseGoal;   // Total ETH to raise\\n        uint256 totalRaised;      // Total ETH raised so far\\n        uint256 tier1WhitelistEndTime; // When tier 1 whitelist period ends\\n        uint256 tier2WhitelistEndTime; // When tier 2 whitelist period ends\\n        bool isActive;            // Whether the presale is active\\n    }\\n\\n    // Mapping from presale ID to Presale struct\\n    mapping(uint256 => Presale) public presales;\\n    \\n    // Mapping from presale ID to user address to deposited amount\\n    mapping(uint256 => mapping(address => uint256)) public userDeposits;\\n    \\n    // Mapping from presale ID to user address to max allowed deposit (whitelist amount)\\n    mapping(uint256 => mapping(address => uint256)) public tier1Whitelist;\\n    mapping(uint256 => mapping(address => uint256)) public tier2Whitelist;\\n    \\n    // Counter for presale IDs\\n    uint256 public presaleCounter;\\n\\n    // Events\\n    event PresaleCreated(uint256 indexed presaleId, address tokenAddress, string tokenSymbol, uint256 tokenPrice);\\n    event Deposit(uint256 indexed presaleId, address indexed user, uint256 amount, uint256 tokensReceived);\\n    event WhitelistUpdated(uint256 indexed presaleId, address indexed user, uint256 amount, uint8 tier);\\n    event PresaleUpdated(uint256 indexed presaleId, bool isActive);\\n    event TokensWithdrawn(uint256 indexed presaleId, address indexed user, uint256 amount);\\n    event FundsWithdrawn(uint256 indexed presaleId, address indexed recipient, uint256 amount);\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    /**\\n     * @dev Create a new presale\\n     * @param _tokenAddress Address of the token being sold\\n     * @param _tokenSymbol Symbol of the token being sold\\n     * @param _tokenPrice Price of the token in ETH (wei)\\n     * @param _valuation Project valuation in USD (scaled by 1e18)\\n     * @param _totalAllocation Total token allocation for the presale\\n     * @param _startTime Start time of the presale\\n     * @param _endTime End time of the presale\\n     * @param _minDepositAmount Minimum deposit amount per user\\n     * @param _maxDepositAmount Maximum deposit amount per user\\n     * @param _totalRaiseGoal Total ETH to raise\\n     * @param _tier1WhitelistEndTime When tier 1 whitelist period ends\\n     * @param _tier2WhitelistEndTime When tier 2 whitelist period ends\\n     */\\n    function createPresale(\\n        address _tokenAddress,\\n        string memory _tokenSymbol,\\n        uint256 _tokenPrice,\\n        uint256 _valuation,\\n        uint256 _totalAllocation,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _minDepositAmount,\\n        uint256 _maxDepositAmount,\\n        uint256 _totalRaiseGoal,\\n        uint256 _tier1WhitelistEndTime,\\n        uint256 _tier2WhitelistEndTime\\n    ) external onlyOwner {\\n        require(_tokenAddress != address(0), \\\"Invalid token address\\\");\\n        require(bytes(_tokenSymbol).length > 0, \\\"Invalid token symbol\\\");\\n        require(_tokenPrice > 0, \\\"Token price must be greater than 0\\\");\\n        require(_valuation > 0, \\\"Valuation must be greater than 0\\\");\\n        require(_totalAllocation > 0, \\\"Total allocation must be greater than 0\\\");\\n        require(_startTime < _endTime, \\\"Start time must be before end time\\\");\\n        require(_minDepositAmount > 0, \\\"Min deposit must be greater than 0\\\");\\n        require(_maxDepositAmount >= _minDepositAmount, \\\"Max deposit must be greater than or equal to min deposit\\\");\\n        require(_totalRaiseGoal > 0, \\\"Total raise goal must be greater than 0\\\");\\n        require(_tier1WhitelistEndTime >= _startTime, \\\"Tier 1 whitelist end time must be after start time\\\");\\n        require(_tier2WhitelistEndTime >= _tier1WhitelistEndTime, \\\"Tier 2 whitelist end time must be after tier 1 end time\\\");\\n        require(_tier2WhitelistEndTime <= _endTime, \\\"Tier 2 whitelist end time must be before end time\\\");\\n\\n        presaleCounter++;\\n        uint256 presaleId = presaleCounter;\\n\\n        presales[presaleId] = Presale({\\n            presaleId: presaleId,\\n            tokenAddress: _tokenAddress,\\n            tokenSymbol: _tokenSymbol,\\n            tokenPrice: _tokenPrice,\\n            valuation: _valuation,\\n            totalAllocation: _totalAllocation,\\n            startTime: _startTime,\\n            endTime: _endTime,\\n            minDepositAmount: _minDepositAmount,\\n            maxDepositAmount: _maxDepositAmount,\\n            totalRaiseGoal: _totalRaiseGoal,\\n            totalRaised: 0,\\n            tier1WhitelistEndTime: _tier1WhitelistEndTime,\\n            tier2WhitelistEndTime: _tier2WhitelistEndTime,\\n            isActive: true\\n        });\\n\\n        emit PresaleCreated(presaleId, _tokenAddress, _tokenSymbol, _tokenPrice);\\n    }\\n\\n    /**\\n     * @dev Add users to tier 1 whitelist\\n     * @param _presaleId ID of the presale\\n     * @param _users Array of user addresses\\n     * @param _amounts Array of max deposit amounts for each user\\n     */\\n    function addToTier1Whitelist(\\n        uint256 _presaleId,\\n        address[] calldata _users,\\n        uint256[] calldata _amounts\\n    ) external onlyOwner {\\n        require(presales[_presaleId].isActive, \\\"Presale is not active\\\");\\n        require(_users.length == _amounts.length, \\\"Arrays length mismatch\\\");\\n\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            tier1Whitelist[_presaleId][_users[i]] = _amounts[i];\\n            emit WhitelistUpdated(_presaleId, _users[i], _amounts[i], 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Add users to tier 2 whitelist\\n     * @param _presaleId ID of the presale\\n     * @param _users Array of user addresses\\n     * @param _amounts Array of max deposit amounts for each user\\n     */\\n    function addToTier2Whitelist(\\n        uint256 _presaleId,\\n        address[] calldata _users,\\n        uint256[] calldata _amounts\\n    ) external onlyOwner {\\n        require(presales[_presaleId].isActive, \\\"Presale is not active\\\");\\n        require(_users.length == _amounts.length, \\\"Arrays length mismatch\\\");\\n\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            tier2Whitelist[_presaleId][_users[i]] = _amounts[i];\\n            emit WhitelistUpdated(_presaleId, _users[i], _amounts[i], 2);\\n        }\\n    }\\n\\n    /**\\n     * @dev Deposit ETH to participate in a presale\\n     * @param _presaleId ID of the presale\\n     */\\n    function deposit(uint256 _presaleId) external payable nonReentrant {\\n        Presale storage presale = presales[_presaleId];\\n        \\n        require(presale.isActive, \\\"Presale is not active\\\");\\n        require(block.timestamp >= presale.startTime, \\\"Presale has not started yet\\\");\\n        require(block.timestamp <= presale.endTime, \\\"Presale has ended\\\");\\n        require(msg.value >= presale.minDepositAmount, \\\"Deposit amount is less than minimum\\\");\\n        require(userDeposits[_presaleId][msg.sender] + msg.value <= presale.maxDepositAmount, \\\"Exceeds maximum deposit amount\\\");\\n        require(presale.totalRaised + msg.value <= presale.totalRaiseGoal, \\\"Exceeds total raise goal\\\");\\n\\n        // Check whitelist status based on current time\\n        if (block.timestamp <= presale.tier1WhitelistEndTime) {\\n            // Tier 1 whitelist period\\n            require(tier1Whitelist[_presaleId][msg.sender] > 0, \\\"Not in tier 1 whitelist\\\");\\n            require(userDeposits[_presaleId][msg.sender] + msg.value <= tier1Whitelist[_presaleId][msg.sender], \\\"Exceeds tier 1 whitelist amount\\\");\\n        } else if (block.timestamp <= presale.tier2WhitelistEndTime) {\\n            // Tier 2 whitelist period\\n            require(tier1Whitelist[_presaleId][msg.sender] > 0 || tier2Whitelist[_presaleId][msg.sender] > 0, \\\"Not in any whitelist\\\");\\n            \\n            if (tier1Whitelist[_presaleId][msg.sender] > 0) {\\n                require(userDeposits[_presaleId][msg.sender] + msg.value <= tier1Whitelist[_presaleId][msg.sender], \\\"Exceeds tier 1 whitelist amount\\\");\\n            } else {\\n                require(userDeposits[_presaleId][msg.sender] + msg.value <= tier2Whitelist[_presaleId][msg.sender], \\\"Exceeds tier 2 whitelist amount\\\");\\n            }\\n        }\\n        // After tier2WhitelistEndTime, anyone can participate up to maxDepositAmount\\n\\n        // Calculate tokens to receive\\n        uint256 tokensToReceive = (msg.value * 1e18) / presale.tokenPrice;\\n        \\n        // Update state\\n        userDeposits[_presaleId][msg.sender] += msg.value;\\n        presale.totalRaised += msg.value;\\n        \\n        emit Deposit(_presaleId, msg.sender, msg.value, tokensToReceive);\\n    }\\n\\n    /**\\n     * @dev Withdraw tokens after presale ends (for users)\\n     * @param _presaleId ID of the presale\\n     */\\n    function withdrawTokens(uint256 _presaleId) external nonReentrant {\\n        Presale storage presale = presales[_presaleId];\\n        \\n        require(block.timestamp > presale.endTime, \\\"Presale has not ended yet\\\");\\n        require(userDeposits[_presaleId][msg.sender] > 0, \\\"No deposits found\\\");\\n        \\n        uint256 depositAmount = userDeposits[_presaleId][msg.sender];\\n        uint256 tokensToReceive = (depositAmount * 1e18) / presale.tokenPrice;\\n        \\n        // Reset user deposit to prevent re-entrancy\\n        userDeposits[_presaleId][msg.sender] = 0;\\n        \\n        // Transfer tokens to user\\n        IERC20 token = IERC20(presale.tokenAddress);\\n        require(token.transfer(msg.sender, tokensToReceive), \\\"Token transfer failed\\\");\\n        \\n        emit TokensWithdrawn(_presaleId, msg.sender, tokensToReceive);\\n    }\\n\\n    /**\\n     * @dev Withdraw raised funds (for owner)\\n     * @param _presaleId ID of the presale\\n     * @param _recipient Address to receive the funds\\n     */\\n    function withdrawFunds(uint256 _presaleId, address payable _recipient) external onlyOwner nonReentrant {\\n        Presale storage presale = presales[_presaleId];\\n        \\n        require(block.timestamp > presale.endTime, \\\"Presale has not ended yet\\\");\\n        require(_recipient != address(0), \\\"Invalid recipient address\\\");\\n        \\n        uint256 amount = presale.totalRaised;\\n        presale.totalRaised = 0;\\n        \\n        // Transfer ETH to recipient\\n        (bool success, ) = _recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"ETH transfer failed\\\");\\n        \\n        emit FundsWithdrawn(_presaleId, _recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Set presale active status\\n     * @param _presaleId ID of the presale\\n     * @param _isActive Whether the presale is active\\n     */\\n    function setPresaleStatus(uint256 _presaleId, bool _isActive) external onlyOwner {\\n        require(presales[_presaleId].presaleId == _presaleId, \\\"Presale does not exist\\\");\\n        presales[_presaleId].isActive = _isActive;\\n        emit PresaleUpdated(_presaleId, _isActive);\\n    }\\n\\n    /**\\n     * @dev Get user deposit amount\\n     * @param _presaleId ID of the presale\\n     * @param _user Address of the user\\n     * @return User's deposit amount\\n     */\\n    function getUserDeposit(uint256 _presaleId, address _user) external view returns (uint256) {\\n        return userDeposits[_presaleId][_user];\\n    }\\n\\n    /**\\n     * @dev Get user whitelist status and amount\\n     * @param _presaleId ID of the presale\\n     * @param _user Address of the user\\n     * @return tier1Amount Tier 1 whitelist amount\\n     * @return tier2Amount Tier 2 whitelist amount\\n     */\\n    function getUserWhitelistStatus(uint256 _presaleId, address _user) external view returns (uint256 tier1Amount, uint256 tier2Amount) {\\n        return (tier1Whitelist[_presaleId][_user], tier2Whitelist[_presaleId][_user]);\\n    }\\n\\n    /**\\n     * @dev Calculate tokens to receive for a given ETH amount\\n     * @param _presaleId ID of the presale\\n     * @param _ethAmount Amount of ETH\\n     * @return Amount of tokens to receive\\n     */\\n    function calculateTokenAmount(uint256 _presaleId, uint256 _ethAmount) external view returns (uint256) {\\n        Presale storage presale = presales[_presaleId];\\n        return (_ethAmount * 1e18) / presale.tokenPrice;\\n    }\\n\\n    /**\\n     * @dev Emergency function to recover any ERC20 tokens sent to the contract by mistake\\n     * @param _tokenAddress Address of the token to recover\\n     * @param _recipient Address to receive the tokens\\n     */\\n    function recoverERC20(address _tokenAddress, address _recipient) external onlyOwner {\\n        IERC20 token = IERC20(_tokenAddress);\\n        uint256 balance = token.balanceOf(address(this));\\n        require(token.transfer(_recipient, balance), \\\"Token transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x23a540cd64564f7b4a13c7c0daeae11225d0d5cc638f762b082862ba3c2c0ce3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461007e5733156100685760008054336001600160a01b03198216811783556040519290916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a360018055611c7390816100848239f35b631e4fbdf760e01b815260006004820152602490fd5b600080fdfe6080604052600436101561001257600080fd5b60003560e01c8063035538351461183f5780630b884728146117f75780632a96abae14610ff35780632d5c5f6e14610fd5578063315a095d14610e48578063459ffc1e14610de25780634e055244146100ed57806351010f9314610cf6578063637624fe14610cae578063715018a614610c55578063744bfe6114610b025780637dbfb36d1461097a57806387697cc4146108ab578063886f039a146107875780638da5cb5b1461075e578063af6685b11461066e578063b6b55f25146101c8578063f2fde38b1461013a5763f9c516ea146100ed57600080fd5b3461013557604036600319011261013557610106611896565b600435600052600360205260406000209060018060a01b03166000526020526020604060002054604051908152f35b600080fd5b34610135576020366003190112610135576101536118ac565b61015b6119fb565b6001600160a01b039081169081156101af57600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b602080600319360112610135576004356101e0611b72565b806000526002825260406000206101fd60ff600e83015416611a36565b6006810154421061062957600781015442116105f0576008810154341061059f5781600052600390818452604060002033600052845261024234604060002054611af9565b60098201541061055a57600b81019061025c348354611af9565b600a8201541061051557600c81015442116103bb578360005260048552604060002033600052855260406000205415610376578360005282855260406000203360005285526102d36102b334604060002054611af9565b856000526004875260406000203360005287526040600020541015611b06565b670de0b6b3a764000080340290348204143415171561036057836102f992015490611b52565b918360005284526040600020336000528452604060002061031b348254611af9565b9055610328348254611af9565b9055604051923484528301527fd36a2f67d06d285786f61a32b052b9ace6b0b7abef5177b54358abdc83a0b69b60403393a360018055005b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260048101869052601760248201527f4e6f7420696e207469657220312077686974656c6973740000000000000000006044820152606490fd5b600d8101544211156103cd575b6102d3565b83600052600485526040600020336000528552604060002054158015906104f4575b156104b8576000848152600486526040808220338352875290205415610433578360005282855260406000203360005285526103c86102b334604060002054611af9565b83600052828552604060002033600052855261045434604060002054611af9565b8460005260058652604060002033600052865260406000205410156103c85760405162461bcd60e51b815260048101869052601f60248201527f45786365656473207469657220322077686974656c69737420616d6f756e74006044820152606490fd5b60405162461bcd60e51b8152600481018690526014602482015273139bdd081a5b88185b9e481dda1a5d195b1a5cdd60621b6044820152606490fd5b508360005260058552604060002033600052855260406000205415156103ef565b60405162461bcd60e51b815260048101869052601860248201527f4578636565647320746f74616c20726169736520676f616c00000000000000006044820152606490fd5b60405162461bcd60e51b815260048101859052601e60248201527f45786365656473206d6178696d756d206465706f73697420616d6f756e7400006044820152606490fd5b60405162461bcd60e51b815260048101849052602360248201527f4465706f73697420616d6f756e74206973206c657373207468616e206d696e696044820152626d756d60e81b6064820152608490fd5b60405162461bcd60e51b8152600481018490526011602482015270141c995cd85b19481a185cc8195b991959607a1b6044820152606490fd5b60405162461bcd60e51b815260048101849052601b60248201527f50726573616c6520686173206e6f7420737461727465642079657400000000006044820152606490fd5b346101355761067c36611931565b919390926106886119fb565b816000526002946020938685526106a960ff600e6040600020015416611a36565b6106b4818314611a7a565b60005b8281106106c057005b8088867ffa8586e3746c24cb9747949d6808eee4fa8e8ac9cd30a7c650dc65158362538360408a8c610746878a61074061072c8f9c8f6107599e61070583878b611abf565b60008e815260058c528c90206001600160a01b039b9135918c61073161072c888888611abf565b611ae5565b16600052528b60002055611abf565b93611abf565b359583519687528d8701521693a3611a27565b6106b7565b34610135576000366003190112610135576000546040516001600160a01b039091168152602090f35b34610135576040366003190112610135576107a06118ac565b6107a8611896565b906107b16119fb565b6040516370a0823160e01b81523060048201526020926001600160a01b0392909216918382602481865afa90811561086c578492600092610878575b5060405163a9059cbb60e01b81526001600160a01b039091166004820152602481019190915291829081600081604481015b03925af190811561086c5761083d9260009261083f575b5050611bf9565b005b61085e9250803d10610865575b61085681836118c2565b810190611be1565b8280610836565b503d61084c565b6040513d6000823e3d90fd5b8381949293503d83116108a4575b61089081836118c2565b81010312610135579051839161081f6107ed565b503d610886565b346101355760403660031901126101355760043560243580151590818103610135576108d56119fb565b826000526002602052826040600020540361093c577fa2eb246c0db06549b910e366aad678d6c2e1ebc47b5b5b46c8f8c29730287096916109336020928560005260028452600e6040600020019060ff801983541691151516179055565b604051908152a2005b60405162461bcd60e51b8152602060048201526016602482015275141c995cd85b1948191bd95cc81b9bdd08195e1a5cdd60521b6044820152606490fd5b34610135576020366003190112610135576004356000526002602052604060002080549060019160018060a01b03838301541691600281016040519485916000918154916109c783611981565b80865292828116908115610ae25750600114610a9f575b505050036109ec90856118c2565b60038101549060048101546005820154600683015460078401546008850154600986015491600a87015493600b88015495600c89015497600d8a015499600e015460ff169a6040519e8f9e8f9e8f908152602001528d6101e09081604082015201610a56916119bb565b9c6060015260808d015260a08c015260c08b015260e08a01526101008901526101208801526101408701526101608601526101808501526101a084015215156101c08301520390f35b60009081526020812092949350915b848310610ac757505081602092935001018680806109de565b81935090816020925483858c01015201910190918792610aae565b925050506020925060ff191682840152151560051b8201018680806109de565b34610135576040366003190112610135576024356001600160a01b038116906004359082900361013557610b346119fb565b610b3c611b72565b8060005260026020526040600020610b5960078201544211611b95565b8215610c1057600b01600081549155600080808084875af13d15610c0b573d610b81816118e4565b90610b8f60405192836118c2565b8152600060203d92013e5b15610bd05760207ff440aec6b52895984d061d622e6edeba6210f7c3e059be920663140c084560d791604051908152a360018055005b60405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152606490fd5b610b9a565b60405162461bcd60e51b815260206004820152601960248201527f496e76616c696420726563697069656e742061646472657373000000000000006044820152606490fd5b3461013557600036600319011261013557610c6e6119fb565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461013557604036600319011261013557610cc7611896565b600435600052600560205260406000209060018060a01b03166000526020526020604060002054604051908152f35b3461013557610d0436611931565b610d129491949392936119fb565b8160005260209260028452610d3160ff600e6040600020015416611a36565b610d3c828614611a7a565b60005b858110610d4857005b8087857ffa8586e3746c24cb9747949d6808eee4fa8e8ac9cd30a7c650dc651583625383604089610dc8868a610dc28f8361072c918e610d8c610ddd9f878f611abf565b60008d815260048b528b90206001600160a01b039a9135918b610db361072c888888611abf565b16600052528a60002055611abf565b97611abf565b3594825195865260018c8701521693a3611a27565b610d3f565b34610135576040366003190112610135576040600435610e00611896565b816000526004602052826000209060018060a01b0316908160005260205282600020549160005260056020528260002090600052602052816000205482519182526020820152f35b346101355760208060031936011261013557600435610e65611b72565b8060005260028252604060002091610e8260078401544211611b95565b8160005260038152604060002033600052815260406000205415610f9d5781600052600381526040600020336000528152604060002054670de0b6b3a764000090818102918183041490151715610360576003840154610ee191611b52565b60008381526003835260408082203380845290855281832083905560019690960154905163a9059cbb60e01b8152600481019690965260248601839052919492918291849160449183916001600160a01b03165af191821561086c577f3f5fbaf86658fdadee77f1d46e7f8a72424ad9839eda6a1dc6eb0a4228e4226e92610f7191600091610f80575b50611bf9565b6040519384523393a360018055005b610f979150833d85116108655761085681836118c2565b86610f6b565b6064906040519062461bcd60e51b825260048201526011602482015270139bc819195c1bdcda5d1cc8199bdd5b99607a1b6044820152fd5b34610135576000366003190112610135576020600654604051908152f35b34610135576101803660031901126101355761100d6118ac565b60243567ffffffffffffffff81116101355736602382011215610135578060040135611038816118e4565b9161104660405193846118c2565b81835236602483830101116101355781600092602460209301838601378301015261106f6119fb565b6001600160a01b038216156117ba5780511561177e5760449081351561172f576064928335156116ec5760849283351561169a5760c43560a435101561164d5760e435156116005760e43561010435106115985761012435156115465760a43561014435106114e9576101443561016435106114815760c4356101643511611425576110fc600654611a27565b938460065560405195866101e081011067ffffffffffffffff6101e08901111761140f576101e0870160405285875260018060a01b0384166020880152846040880152823560608801523560808701523560a086015260a43560c086015260c43560e086015260e4356101008601526101043561012086015261012435610140860152600061016086015261014435610180860152610164356101a086015260016101c08601528360005260026020526040600020855181556001810160018060a01b036020880151166bffffffffffffffffffffffff60a01b825416179055604086015195865167ffffffffffffffff811161140f576112006002840154611981565b601f81116113c8575b506020601f821160011461132d576112f2939282600e936101c0937f12126851c6c652371b37b88889202cb01b4c07c85e588845cb89ac526ea9a9969b9c600092611322575b50508160011b916000199060031b1c19161760028501555b606081015160038501556080810151600485015560a0810151600585015560c0810151600685015560e0810151600785015561010081015160088501556101208101516009850155610140810151600a850155610160810151600b850155610180810151600c8501556101a0810151600d8501550151151591019060ff801983541691151516179055565b61131660405193849360018060a01b031684526060602085015260608401906119bb565b903560408301520390a2005b015190508c8061124f565b6002840160005260206000209860005b601f19841681106113b05750926001837f12126851c6c652371b37b88889202cb01b4c07c85e588845cb89ac526ea9a9969a9b6101c0946112f29897600e97601f19811610611397575b505050811b016002850155611267565b015160001960f88460031b161c191690558c8080611387565b828201518b556001909a01996020928301920161133d565b600284016000526020600020601f830160051c810160208410611408575b601f830160051c820181106113fc575050611209565b600081556001016113e6565b50806113e6565b634e487b7160e01b600052604160045260246000fd5b83907065206265666f726520656e642074696d6560781b867f5469657220322077686974656c69737420656e642074696d65206d75737420626040519362461bcd60e51b85526020600486015260316024860152840152820152fd5b83907f652061667465722074696572203120656e642074696d65000000000000000000867f5469657220322077686974656c69737420656e642074696d65206d75737420626040519362461bcd60e51b85526020600486015260376024860152840152820152fd5b839071652061667465722073746172742074696d6560701b867f5469657220312077686974656c69737420656e642074696d65206d75737420626040519362461bcd60e51b85526020600486015260326024860152840152820152fd5b8390660207468616e20360cc1b867f546f74616c20726169736520676f616c206d75737420626520677265617465726040519362461bcd60e51b85526020600486015260276024860152840152820152fd5b83907f206f7220657175616c20746f206d696e206465706f7369740000000000000000867f4d6178206465706f736974206d7573742062652067726561746572207468616e6040519362461bcd60e51b85526020600486015260386024860152840152820152fd5b839061020360f41b867f4d696e206465706f736974206d7573742062652067726561746572207468616e6040519362461bcd60e51b85526020600486015260226024860152840152820152fd5b8390616d6560f01b867f53746172742074696d65206d757374206265206265666f726520656e642074696040519362461bcd60e51b85526020600486015260226024860152840152820152fd5b8390660207468616e20360cc1b867f546f74616c20616c6c6f636174696f6e206d75737420626520677265617465726040519362461bcd60e51b85526020600486015260276024860152840152820152fd5b50507f56616c756174696f6e206d7573742062652067726561746572207468616e20306040519162461bcd60e51b83526020600484015260206024840152820152fd5b60405162461bcd60e51b815260206004820152602260248201527f546f6b656e207072696365206d7573742062652067726561746572207468616e8184015261020360f41b6064820152608490fd5b60405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081d1bdad95b881cde5b589bdb60621b6044820152606490fd5b60405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b6044820152606490fd5b3461013557604036600319011261013557611810611896565b600435600052600460205260406000209060018060a01b03166000526020526020604060002054604051908152f35b346101355760403660031901126101355760243560043560005260026020526040600020670de0b6b3a76400009182810292818404149015171561036057602091600361188e92015490611b52565b604051908152f35b602435906001600160a01b038216820361013557565b600435906001600160a01b038216820361013557565b90601f8019910116810190811067ffffffffffffffff82111761140f57604052565b67ffffffffffffffff811161140f57601f01601f191660200190565b9181601f840112156101355782359167ffffffffffffffff8311610135576020808501948460051b01011161013557565b906060600319830112610135576004359167ffffffffffffffff91602435838111610135578261196391600401611900565b939093926044359182116101355761197d91600401611900565b9091565b90600182811c921680156119b1575b602083101461199b57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611990565b919082519283825260005b8481106119e7575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016119c6565b6000546001600160a01b03163303611a0f57565b60405163118cdaa760e01b8152336004820152602490fd5b60001981146103605760010190565b15611a3d57565b60405162461bcd60e51b815260206004820152601560248201527450726573616c65206973206e6f742061637469766560581b6044820152606490fd5b15611a8157565b60405162461bcd60e51b8152602060048201526016602482015275082e4e4c2f2e640d8cadccee8d040dad2e6dac2e8c6d60531b6044820152606490fd5b9190811015611acf5760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036101355790565b9190820180921161036057565b15611b0d57565b60405162461bcd60e51b815260206004820152601f60248201527f45786365656473207469657220312077686974656c69737420616d6f756e74006044820152606490fd5b8115611b5c570490565b634e487b7160e01b600052601260045260246000fd5b600260015414611b83576002600155565b604051633ee5aeb560e01b8152600490fd5b15611b9c57565b60405162461bcd60e51b815260206004820152601960248201527f50726573616c6520686173206e6f7420656e64656420796574000000000000006044820152606490fd5b90816020910312610135575180151581036101355790565b15611c0057565b60405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606490fdfea2646970667358221220b92ae1a4277422bfb161a0ab45382182236fda1d2bfecc6d1b2b49eea89c7d2664736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c8063035538351461183f5780630b884728146117f75780632a96abae14610ff35780632d5c5f6e14610fd5578063315a095d14610e48578063459ffc1e14610de25780634e055244146100ed57806351010f9314610cf6578063637624fe14610cae578063715018a614610c55578063744bfe6114610b025780637dbfb36d1461097a57806387697cc4146108ab578063886f039a146107875780638da5cb5b1461075e578063af6685b11461066e578063b6b55f25146101c8578063f2fde38b1461013a5763f9c516ea146100ed57600080fd5b3461013557604036600319011261013557610106611896565b600435600052600360205260406000209060018060a01b03166000526020526020604060002054604051908152f35b600080fd5b34610135576020366003190112610135576101536118ac565b61015b6119fb565b6001600160a01b039081169081156101af57600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b602080600319360112610135576004356101e0611b72565b806000526002825260406000206101fd60ff600e83015416611a36565b6006810154421061062957600781015442116105f0576008810154341061059f5781600052600390818452604060002033600052845261024234604060002054611af9565b60098201541061055a57600b81019061025c348354611af9565b600a8201541061051557600c81015442116103bb578360005260048552604060002033600052855260406000205415610376578360005282855260406000203360005285526102d36102b334604060002054611af9565b856000526004875260406000203360005287526040600020541015611b06565b670de0b6b3a764000080340290348204143415171561036057836102f992015490611b52565b918360005284526040600020336000528452604060002061031b348254611af9565b9055610328348254611af9565b9055604051923484528301527fd36a2f67d06d285786f61a32b052b9ace6b0b7abef5177b54358abdc83a0b69b60403393a360018055005b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260048101869052601760248201527f4e6f7420696e207469657220312077686974656c6973740000000000000000006044820152606490fd5b600d8101544211156103cd575b6102d3565b83600052600485526040600020336000528552604060002054158015906104f4575b156104b8576000848152600486526040808220338352875290205415610433578360005282855260406000203360005285526103c86102b334604060002054611af9565b83600052828552604060002033600052855261045434604060002054611af9565b8460005260058652604060002033600052865260406000205410156103c85760405162461bcd60e51b815260048101869052601f60248201527f45786365656473207469657220322077686974656c69737420616d6f756e74006044820152606490fd5b60405162461bcd60e51b8152600481018690526014602482015273139bdd081a5b88185b9e481dda1a5d195b1a5cdd60621b6044820152606490fd5b508360005260058552604060002033600052855260406000205415156103ef565b60405162461bcd60e51b815260048101869052601860248201527f4578636565647320746f74616c20726169736520676f616c00000000000000006044820152606490fd5b60405162461bcd60e51b815260048101859052601e60248201527f45786365656473206d6178696d756d206465706f73697420616d6f756e7400006044820152606490fd5b60405162461bcd60e51b815260048101849052602360248201527f4465706f73697420616d6f756e74206973206c657373207468616e206d696e696044820152626d756d60e81b6064820152608490fd5b60405162461bcd60e51b8152600481018490526011602482015270141c995cd85b19481a185cc8195b991959607a1b6044820152606490fd5b60405162461bcd60e51b815260048101849052601b60248201527f50726573616c6520686173206e6f7420737461727465642079657400000000006044820152606490fd5b346101355761067c36611931565b919390926106886119fb565b816000526002946020938685526106a960ff600e6040600020015416611a36565b6106b4818314611a7a565b60005b8281106106c057005b8088867ffa8586e3746c24cb9747949d6808eee4fa8e8ac9cd30a7c650dc65158362538360408a8c610746878a61074061072c8f9c8f6107599e61070583878b611abf565b60008e815260058c528c90206001600160a01b039b9135918c61073161072c888888611abf565b611ae5565b16600052528b60002055611abf565b93611abf565b359583519687528d8701521693a3611a27565b6106b7565b34610135576000366003190112610135576000546040516001600160a01b039091168152602090f35b34610135576040366003190112610135576107a06118ac565b6107a8611896565b906107b16119fb565b6040516370a0823160e01b81523060048201526020926001600160a01b0392909216918382602481865afa90811561086c578492600092610878575b5060405163a9059cbb60e01b81526001600160a01b039091166004820152602481019190915291829081600081604481015b03925af190811561086c5761083d9260009261083f575b5050611bf9565b005b61085e9250803d10610865575b61085681836118c2565b810190611be1565b8280610836565b503d61084c565b6040513d6000823e3d90fd5b8381949293503d83116108a4575b61089081836118c2565b81010312610135579051839161081f6107ed565b503d610886565b346101355760403660031901126101355760043560243580151590818103610135576108d56119fb565b826000526002602052826040600020540361093c577fa2eb246c0db06549b910e366aad678d6c2e1ebc47b5b5b46c8f8c29730287096916109336020928560005260028452600e6040600020019060ff801983541691151516179055565b604051908152a2005b60405162461bcd60e51b8152602060048201526016602482015275141c995cd85b1948191bd95cc81b9bdd08195e1a5cdd60521b6044820152606490fd5b34610135576020366003190112610135576004356000526002602052604060002080549060019160018060a01b03838301541691600281016040519485916000918154916109c783611981565b80865292828116908115610ae25750600114610a9f575b505050036109ec90856118c2565b60038101549060048101546005820154600683015460078401546008850154600986015491600a87015493600b88015495600c89015497600d8a015499600e015460ff169a6040519e8f9e8f9e8f908152602001528d6101e09081604082015201610a56916119bb565b9c6060015260808d015260a08c015260c08b015260e08a01526101008901526101208801526101408701526101608601526101808501526101a084015215156101c08301520390f35b60009081526020812092949350915b848310610ac757505081602092935001018680806109de565b81935090816020925483858c01015201910190918792610aae565b925050506020925060ff191682840152151560051b8201018680806109de565b34610135576040366003190112610135576024356001600160a01b038116906004359082900361013557610b346119fb565b610b3c611b72565b8060005260026020526040600020610b5960078201544211611b95565b8215610c1057600b01600081549155600080808084875af13d15610c0b573d610b81816118e4565b90610b8f60405192836118c2565b8152600060203d92013e5b15610bd05760207ff440aec6b52895984d061d622e6edeba6210f7c3e059be920663140c084560d791604051908152a360018055005b60405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152606490fd5b610b9a565b60405162461bcd60e51b815260206004820152601960248201527f496e76616c696420726563697069656e742061646472657373000000000000006044820152606490fd5b3461013557600036600319011261013557610c6e6119fb565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461013557604036600319011261013557610cc7611896565b600435600052600560205260406000209060018060a01b03166000526020526020604060002054604051908152f35b3461013557610d0436611931565b610d129491949392936119fb565b8160005260209260028452610d3160ff600e6040600020015416611a36565b610d3c828614611a7a565b60005b858110610d4857005b8087857ffa8586e3746c24cb9747949d6808eee4fa8e8ac9cd30a7c650dc651583625383604089610dc8868a610dc28f8361072c918e610d8c610ddd9f878f611abf565b60008d815260048b528b90206001600160a01b039a9135918b610db361072c888888611abf565b16600052528a60002055611abf565b97611abf565b3594825195865260018c8701521693a3611a27565b610d3f565b34610135576040366003190112610135576040600435610e00611896565b816000526004602052826000209060018060a01b0316908160005260205282600020549160005260056020528260002090600052602052816000205482519182526020820152f35b346101355760208060031936011261013557600435610e65611b72565b8060005260028252604060002091610e8260078401544211611b95565b8160005260038152604060002033600052815260406000205415610f9d5781600052600381526040600020336000528152604060002054670de0b6b3a764000090818102918183041490151715610360576003840154610ee191611b52565b60008381526003835260408082203380845290855281832083905560019690960154905163a9059cbb60e01b8152600481019690965260248601839052919492918291849160449183916001600160a01b03165af191821561086c577f3f5fbaf86658fdadee77f1d46e7f8a72424ad9839eda6a1dc6eb0a4228e4226e92610f7191600091610f80575b50611bf9565b6040519384523393a360018055005b610f979150833d85116108655761085681836118c2565b86610f6b565b6064906040519062461bcd60e51b825260048201526011602482015270139bc819195c1bdcda5d1cc8199bdd5b99607a1b6044820152fd5b34610135576000366003190112610135576020600654604051908152f35b34610135576101803660031901126101355761100d6118ac565b60243567ffffffffffffffff81116101355736602382011215610135578060040135611038816118e4565b9161104660405193846118c2565b81835236602483830101116101355781600092602460209301838601378301015261106f6119fb565b6001600160a01b038216156117ba5780511561177e5760449081351561172f576064928335156116ec5760849283351561169a5760c43560a435101561164d5760e435156116005760e43561010435106115985761012435156115465760a43561014435106114e9576101443561016435106114815760c4356101643511611425576110fc600654611a27565b938460065560405195866101e081011067ffffffffffffffff6101e08901111761140f576101e0870160405285875260018060a01b0384166020880152846040880152823560608801523560808701523560a086015260a43560c086015260c43560e086015260e4356101008601526101043561012086015261012435610140860152600061016086015261014435610180860152610164356101a086015260016101c08601528360005260026020526040600020855181556001810160018060a01b036020880151166bffffffffffffffffffffffff60a01b825416179055604086015195865167ffffffffffffffff811161140f576112006002840154611981565b601f81116113c8575b506020601f821160011461132d576112f2939282600e936101c0937f12126851c6c652371b37b88889202cb01b4c07c85e588845cb89ac526ea9a9969b9c600092611322575b50508160011b916000199060031b1c19161760028501555b606081015160038501556080810151600485015560a0810151600585015560c0810151600685015560e0810151600785015561010081015160088501556101208101516009850155610140810151600a850155610160810151600b850155610180810151600c8501556101a0810151600d8501550151151591019060ff801983541691151516179055565b61131660405193849360018060a01b031684526060602085015260608401906119bb565b903560408301520390a2005b015190508c8061124f565b6002840160005260206000209860005b601f19841681106113b05750926001837f12126851c6c652371b37b88889202cb01b4c07c85e588845cb89ac526ea9a9969a9b6101c0946112f29897600e97601f19811610611397575b505050811b016002850155611267565b015160001960f88460031b161c191690558c8080611387565b828201518b556001909a01996020928301920161133d565b600284016000526020600020601f830160051c810160208410611408575b601f830160051c820181106113fc575050611209565b600081556001016113e6565b50806113e6565b634e487b7160e01b600052604160045260246000fd5b83907065206265666f726520656e642074696d6560781b867f5469657220322077686974656c69737420656e642074696d65206d75737420626040519362461bcd60e51b85526020600486015260316024860152840152820152fd5b83907f652061667465722074696572203120656e642074696d65000000000000000000867f5469657220322077686974656c69737420656e642074696d65206d75737420626040519362461bcd60e51b85526020600486015260376024860152840152820152fd5b839071652061667465722073746172742074696d6560701b867f5469657220312077686974656c69737420656e642074696d65206d75737420626040519362461bcd60e51b85526020600486015260326024860152840152820152fd5b8390660207468616e20360cc1b867f546f74616c20726169736520676f616c206d75737420626520677265617465726040519362461bcd60e51b85526020600486015260276024860152840152820152fd5b83907f206f7220657175616c20746f206d696e206465706f7369740000000000000000867f4d6178206465706f736974206d7573742062652067726561746572207468616e6040519362461bcd60e51b85526020600486015260386024860152840152820152fd5b839061020360f41b867f4d696e206465706f736974206d7573742062652067726561746572207468616e6040519362461bcd60e51b85526020600486015260226024860152840152820152fd5b8390616d6560f01b867f53746172742074696d65206d757374206265206265666f726520656e642074696040519362461bcd60e51b85526020600486015260226024860152840152820152fd5b8390660207468616e20360cc1b867f546f74616c20616c6c6f636174696f6e206d75737420626520677265617465726040519362461bcd60e51b85526020600486015260276024860152840152820152fd5b50507f56616c756174696f6e206d7573742062652067726561746572207468616e20306040519162461bcd60e51b83526020600484015260206024840152820152fd5b60405162461bcd60e51b815260206004820152602260248201527f546f6b656e207072696365206d7573742062652067726561746572207468616e8184015261020360f41b6064820152608490fd5b60405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081d1bdad95b881cde5b589bdb60621b6044820152606490fd5b60405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b6044820152606490fd5b3461013557604036600319011261013557611810611896565b600435600052600460205260406000209060018060a01b03166000526020526020604060002054604051908152f35b346101355760403660031901126101355760243560043560005260026020526040600020670de0b6b3a76400009182810292818404149015171561036057602091600361188e92015490611b52565b604051908152f35b602435906001600160a01b038216820361013557565b600435906001600160a01b038216820361013557565b90601f8019910116810190811067ffffffffffffffff82111761140f57604052565b67ffffffffffffffff811161140f57601f01601f191660200190565b9181601f840112156101355782359167ffffffffffffffff8311610135576020808501948460051b01011161013557565b906060600319830112610135576004359167ffffffffffffffff91602435838111610135578261196391600401611900565b939093926044359182116101355761197d91600401611900565b9091565b90600182811c921680156119b1575b602083101461199b57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611990565b919082519283825260005b8481106119e7575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016119c6565b6000546001600160a01b03163303611a0f57565b60405163118cdaa760e01b8152336004820152602490fd5b60001981146103605760010190565b15611a3d57565b60405162461bcd60e51b815260206004820152601560248201527450726573616c65206973206e6f742061637469766560581b6044820152606490fd5b15611a8157565b60405162461bcd60e51b8152602060048201526016602482015275082e4e4c2f2e640d8cadccee8d040dad2e6dac2e8c6d60531b6044820152606490fd5b9190811015611acf5760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036101355790565b9190820180921161036057565b15611b0d57565b60405162461bcd60e51b815260206004820152601f60248201527f45786365656473207469657220312077686974656c69737420616d6f756e74006044820152606490fd5b8115611b5c570490565b634e487b7160e01b600052601260045260246000fd5b600260015414611b83576002600155565b604051633ee5aeb560e01b8152600490fd5b15611b9c57565b60405162461bcd60e51b815260206004820152601960248201527f50726573616c6520686173206e6f7420656e64656420796574000000000000006044820152606490fd5b90816020910312610135575180151581036101355790565b15611c0057565b60405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606490fdfea2646970667358221220b92ae1a4277422bfb161a0ab45382182236fda1d2bfecc6d1b2b49eea89c7d2664736f6c63430008140033",
  "devdoc": {
    "details": "A contract for managing token presales with tiered whitelisting and configurable parameters",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addToTier1Whitelist(uint256,address[],uint256[])": {
        "details": "Add users to tier 1 whitelist",
        "params": {
          "_amounts": "Array of max deposit amounts for each user",
          "_presaleId": "ID of the presale",
          "_users": "Array of user addresses"
        }
      },
      "addToTier2Whitelist(uint256,address[],uint256[])": {
        "details": "Add users to tier 2 whitelist",
        "params": {
          "_amounts": "Array of max deposit amounts for each user",
          "_presaleId": "ID of the presale",
          "_users": "Array of user addresses"
        }
      },
      "calculateTokenAmount(uint256,uint256)": {
        "details": "Calculate tokens to receive for a given ETH amount",
        "params": {
          "_ethAmount": "Amount of ETH",
          "_presaleId": "ID of the presale"
        },
        "returns": {
          "_0": "Amount of tokens to receive"
        }
      },
      "createPresale(address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Create a new presale",
        "params": {
          "_endTime": "End time of the presale",
          "_maxDepositAmount": "Maximum deposit amount per user",
          "_minDepositAmount": "Minimum deposit amount per user",
          "_startTime": "Start time of the presale",
          "_tier1WhitelistEndTime": "When tier 1 whitelist period ends",
          "_tier2WhitelistEndTime": "When tier 2 whitelist period ends",
          "_tokenAddress": "Address of the token being sold",
          "_tokenPrice": "Price of the token in ETH (wei)",
          "_tokenSymbol": "Symbol of the token being sold",
          "_totalAllocation": "Total token allocation for the presale",
          "_totalRaiseGoal": "Total ETH to raise",
          "_valuation": "Project valuation in USD (scaled by 1e18)"
        }
      },
      "deposit(uint256)": {
        "details": "Deposit ETH to participate in a presale",
        "params": {
          "_presaleId": "ID of the presale"
        }
      },
      "getUserDeposit(uint256,address)": {
        "details": "Get user deposit amount",
        "params": {
          "_presaleId": "ID of the presale",
          "_user": "Address of the user"
        },
        "returns": {
          "_0": "User's deposit amount"
        }
      },
      "getUserWhitelistStatus(uint256,address)": {
        "details": "Get user whitelist status and amount",
        "params": {
          "_presaleId": "ID of the presale",
          "_user": "Address of the user"
        },
        "returns": {
          "tier1Amount": "Tier 1 whitelist amount",
          "tier2Amount": "Tier 2 whitelist amount"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverERC20(address,address)": {
        "details": "Emergency function to recover any ERC20 tokens sent to the contract by mistake",
        "params": {
          "_recipient": "Address to receive the tokens",
          "_tokenAddress": "Address of the token to recover"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setPresaleStatus(uint256,bool)": {
        "details": "Set presale active status",
        "params": {
          "_isActive": "Whether the presale is active",
          "_presaleId": "ID of the presale"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawFunds(uint256,address)": {
        "details": "Withdraw raised funds (for owner)",
        "params": {
          "_presaleId": "ID of the presale",
          "_recipient": "Address to receive the funds"
        }
      },
      "withdrawTokens(uint256)": {
        "details": "Withdraw tokens after presale ends (for users)",
        "params": {
          "_presaleId": "ID of the presale"
        }
      }
    },
    "title": "TokenPresale",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/TokenPresale.sol:TokenPresale",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 996,
        "contract": "contracts/TokenPresale.sol:TokenPresale",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4519,
        "contract": "contracts/TokenPresale.sol:TokenPresale",
        "label": "presales",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Presale)4514_storage)"
      },
      {
        "astId": 4525,
        "contract": "contracts/TokenPresale.sol:TokenPresale",
        "label": "userDeposits",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4531,
        "contract": "contracts/TokenPresale.sol:TokenPresale",
        "label": "tier1Whitelist",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4537,
        "contract": "contracts/TokenPresale.sol:TokenPresale",
        "label": "tier2Whitelist",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4539,
        "contract": "contracts/TokenPresale.sol:TokenPresale",
        "label": "presaleCounter",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Presale)4514_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TokenPresale.Presale)",
        "numberOfBytes": "32",
        "value": "t_struct(Presale)4514_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Presale)4514_storage": {
        "encoding": "inplace",
        "label": "struct TokenPresale.Presale",
        "members": [
          {
            "astId": 4485,
            "contract": "contracts/TokenPresale.sol:TokenPresale",
            "label": "presaleId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4487,
            "contract": "contracts/TokenPresale.sol:TokenPresale",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4489,
            "contract": "contracts/TokenPresale.sol:TokenPresale",
            "label": "tokenSymbol",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 4491,
            "contract": "contracts/TokenPresale.sol:TokenPresale",
            "label": "tokenPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4493,
            "contract": "contracts/TokenPresale.sol:TokenPresale",
            "label": "valuation",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4495,
            "contract": "contracts/TokenPresale.sol:TokenPresale",
            "label": "totalAllocation",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4497,
            "contract": "contracts/TokenPresale.sol:TokenPresale",
            "label": "startTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4499,
            "contract": "contracts/TokenPresale.sol:TokenPresale",
            "label": "endTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4501,
            "contract": "contracts/TokenPresale.sol:TokenPresale",
            "label": "minDepositAmount",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4503,
            "contract": "contracts/TokenPresale.sol:TokenPresale",
            "label": "maxDepositAmount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 4505,
            "contract": "contracts/TokenPresale.sol:TokenPresale",
            "label": "totalRaiseGoal",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 4507,
            "contract": "contracts/TokenPresale.sol:TokenPresale",
            "label": "totalRaised",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 4509,
            "contract": "contracts/TokenPresale.sol:TokenPresale",
            "label": "tier1WhitelistEndTime",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 4511,
            "contract": "contracts/TokenPresale.sol:TokenPresale",
            "label": "tier2WhitelistEndTime",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 4513,
            "contract": "contracts/TokenPresale.sol:TokenPresale",
            "label": "isActive",
            "offset": 0,
            "slot": "14",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}